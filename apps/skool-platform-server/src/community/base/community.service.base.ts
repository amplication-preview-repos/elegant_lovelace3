/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Community as PrismaCommunity,
  Post as PrismaPost,
} from "@prisma/client";

export class CommunityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommunityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.community.count(args);
  }

  async communities(
    args: Prisma.CommunityFindManyArgs
  ): Promise<PrismaCommunity[]> {
    return this.prisma.community.findMany(args);
  }
  async community(
    args: Prisma.CommunityFindUniqueArgs
  ): Promise<PrismaCommunity | null> {
    return this.prisma.community.findUnique(args);
  }
  async createCommunity(
    args: Prisma.CommunityCreateArgs
  ): Promise<PrismaCommunity> {
    return this.prisma.community.create(args);
  }
  async updateCommunity(
    args: Prisma.CommunityUpdateArgs
  ): Promise<PrismaCommunity> {
    return this.prisma.community.update(args);
  }
  async deleteCommunity(
    args: Prisma.CommunityDeleteArgs
  ): Promise<PrismaCommunity> {
    return this.prisma.community.delete(args);
  }

  async findPosts(
    parentId: string,
    args: Prisma.PostFindManyArgs
  ): Promise<PrismaPost[]> {
    return this.prisma.community
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .posts(args);
  }
}
