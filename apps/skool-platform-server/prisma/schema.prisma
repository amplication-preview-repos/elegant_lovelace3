datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ModuleModel {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  title       String?
  lessons     Lesson[]
  course      Course?  @relation(fields: [courseId], references: [id])
  courseId    String?
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String?
  read      Boolean?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Lesson {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String?
  content       String?
  moduleModel   ModuleModel? @relation(fields: [moduleModelId], references: [id])
  moduleModelId String?
}

model Course {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String?
  description String?
  endDate     DateTime?
  startDate   DateTime?
  modules     ModuleModel[]
}

model Community {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  posts     Post[]
}

model Post {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String?
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
  comments    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  firstName     String?
  lastName      String?
  username      String         @unique
  email         String?        @unique
  password      String
  roles         Json
  posts         Post[]
  notifications Notification[]
  comments      Comment[]
}
